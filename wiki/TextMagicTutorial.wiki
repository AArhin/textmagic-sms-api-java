#summary TextMagic java api tutorial

= Introduction =

This tutorial is designed to provide a basic overview of how to use !TextMagic java api. When you have completed the tutorial you will have written a simple web-application that sends and receives sms messages through !TextMagic Sms Gateway.

= Getting started =

First of all you need to create account on [https://www.textmagic.com/app/wt/account/api/cmd/password !TextMagic]

Then you need to download 
 * [http://code.google.com/p/textmagic-sms-api-java/downloads/list textmagic-sms-api.jar] 
and its dependencies:
 * [http://repo1.maven.org/maven2/commons-httpclient/commons-httpclient/3.1/commons-httpclient-3.1.jar Apache Commons http-client]
 * [http://repo1.maven.org/maven2/org/json/json/20090211/json-20090211.jar org.json JSON parsing library]
 * [http://repo1.maven.org/maven2/commons-logging/commons-logging/1.1/commons-logging-1.1.jar Apache Commons Logging]
 * [http://repo1.maven.org/maven2/commons-codec/commons-codec/1.2/commons-codec-1.2.jar Apache Commons Codec]
The !TextMagic java api requires jdk 1.5 and above.

= Instantiating !TextMagicMessageService =

By default the constructor of !TextMagicMessageService requires 2 parameters: your !TextMagic account username and password.

{{{
TextMagicMessageService service = new TextMagicMessageService ("you_username", "your_password");
}}}

This creates thread-safe instance of the service facade.

= Sending Messages =

The api provides set of convinient methods for sending sms messages (please refer to javadoc for complete specification).
The most common used method for sending message to one destination number is

{{{
SentMessage message = service.send("text", "9991234567");
}}}

Lets write jsp page for sending sms messages containing 2 form fields: destination number and message text to be sent. Lets name it "sent.jsp"

NOTE: The all examples in tutorial do contain neccessary headers and import statements. Please download full working example archive at the end of this tutorial

{{{
<h2>Sending Message Example</h2>
<%
    TextMagicMessageService service = new TextMagicMessageService ("YOUR_LOGIN", "YOUR_PASSWORD");
    String phone = request.getParameter( "destination" );
    String messageText = request.getParameter( "message" );
    if ( phone != null && messageText != null) {
	System.out.println(messageText);
        try { 
            SentMessage message = service.send (messageText, phone);
	    System.out.println (message.toString());
%>
            Message with <%= message.toString() %> was successfully send.
<%            
        } catch (ServiceException ex) {
%>
            <font color="red">Cant send message. Reason: <%= ex.getMessage() %> </font>
<%
        }
    }
%>

        <form action="send.jsp" method="POST">
        <table><tr><td>Destination:</td><td><input type="text" name="destination"/></td></tr>
        <tr><td>Message:</td><td><textarea style="width:400px; height:150px" name="message"></textarea></td></tr>
	<tr><td></td><td><input type="Submit" value="Send"/><br/></td></tr>
        </table>
        </form>
}}}

The code is quite obvious: the form submits the form to the same jsp page, and java code gets these http parameters and calls TextMagicMessageService send method.

= Checking your TextMagic account balance =

Sometimes it is required to know beforehand whether you can send messages or can't.
For example, if you don't have enough credits on your balance, you can assume that your sending requests would fail.

TextMagic api provides convinient way to check your balance current state

{{{
 java.math.BigDecimal balance = service.account();
}}}

Lets add to out send.jsp page underline string with current balance:

{{{
        ...
        </form>
	<br/>
	<p>
	Current balance : <%= service.account().toString() %>
	</p>

}}}

Yes, that simple it is.

= Checking sent message delivery status =

After you sent message to TextMagic, it is not gets to the recipient at the same instant.
The operator server can be overloaded and delivering can take some time, the recipient handset can be turned off or even recipient phone number can be wrong and not-existing one.

To check whether you message(or messages) is successfully delivered or delivering is in progress or delivering failes, the following code can be used 

{{{
MessageStatus status = service.messageStatus (id);
}}}
where id - is the id of SentMessage object you got from send call.

Lets write simple check_state.jsp page, that will receive http get "id" parameter and will call TextMagic to check sent message  status:

{{{
<h2>Message Delivery State</h2>
<%

    TextMagicMessageService service = new TextMagicMessageService ("YOUR_USERNAME", "YOUR_PASSWORD");
    Long id = new Long(request.getParameter("id"));
    if ( id != null) {
        try { 
            MessageStatus status = service.messageStatus (id);
%>
            Message Text : <%= status.getMessage().getText() %> <br/>
            Status: <%= status.getDeliveryState().getDescription() %>
<%            
        } catch (ServiceException ex) {
%>
            <font color="red">Cant receive status Reason: <%= ex.getMessage() %> </font>
<%
        }
    }
%>

}}}

= Details =

Add your content here.  Format your content with:
  * Text in *bold* or _italic_
  * Headings, paragraphs, and lists
  * Automatic links to other wiki pages